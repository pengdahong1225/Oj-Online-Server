// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: judge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_judge_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_judge_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_judge_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_judge_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_judge_2eproto;
class SSJudgeRequest;
class SSJudgeRequestDefaultTypeInternal;
extern SSJudgeRequestDefaultTypeInternal _SSJudgeRequest_default_instance_;
class SSJudgeResponse;
class SSJudgeResponseDefaultTypeInternal;
extern SSJudgeResponseDefaultTypeInternal _SSJudgeResponse_default_instance_;
class SSJudgeResult;
class SSJudgeResultDefaultTypeInternal;
extern SSJudgeResultDefaultTypeInternal _SSJudgeResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSJudgeRequest* Arena::CreateMaybeMessage<::SSJudgeRequest>(Arena*);
template<> ::SSJudgeResponse* Arena::CreateMaybeMessage<::SSJudgeResponse>(Arena*);
template<> ::SSJudgeResult* Arena::CreateMaybeMessage<::SSJudgeResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SSJudgeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSJudgeRequest) */ {
 public:
  SSJudgeRequest();
  virtual ~SSJudgeRequest();

  SSJudgeRequest(const SSJudgeRequest& from);
  SSJudgeRequest(SSJudgeRequest&& from) noexcept
    : SSJudgeRequest() {
    *this = ::std::move(from);
  }

  inline SSJudgeRequest& operator=(const SSJudgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSJudgeRequest& operator=(SSJudgeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSJudgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSJudgeRequest* internal_default_instance() {
    return reinterpret_cast<const SSJudgeRequest*>(
               &_SSJudgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSJudgeRequest& a, SSJudgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SSJudgeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSJudgeRequest* New() const final {
    return CreateMaybeMessage<SSJudgeRequest>(nullptr);
  }

  SSJudgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSJudgeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSJudgeRequest& from);
  void MergeFrom(const SSJudgeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSJudgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSJudgeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_judge_2eproto);
    return ::descriptor_table_judge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kLanguageFieldNumber = 3,
    kTestCaseJsonFieldNumber = 4,
    kSessionIdFieldNumber = 2,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string language = 3;
  void clear_language();
  const std::string& language() const;
  void set_language(const std::string& value);
  void set_language(std::string&& value);
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  std::string* mutable_language();
  std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string test_case_json = 4;
  void clear_test_case_json();
  const std::string& test_case_json() const;
  void set_test_case_json(const std::string& value);
  void set_test_case_json(std::string&& value);
  void set_test_case_json(const char* value);
  void set_test_case_json(const char* value, size_t size);
  std::string* mutable_test_case_json();
  std::string* release_test_case_json();
  void set_allocated_test_case_json(std::string* test_case_json);
  private:
  const std::string& _internal_test_case_json() const;
  void _internal_set_test_case_json(const std::string& value);
  std::string* _internal_mutable_test_case_json();
  public:

  // int32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSJudgeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_case_json_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_judge_2eproto;
};
// -------------------------------------------------------------------

class SSJudgeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSJudgeResponse) */ {
 public:
  SSJudgeResponse();
  virtual ~SSJudgeResponse();

  SSJudgeResponse(const SSJudgeResponse& from);
  SSJudgeResponse(SSJudgeResponse&& from) noexcept
    : SSJudgeResponse() {
    *this = ::std::move(from);
  }

  inline SSJudgeResponse& operator=(const SSJudgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSJudgeResponse& operator=(SSJudgeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSJudgeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSJudgeResponse* internal_default_instance() {
    return reinterpret_cast<const SSJudgeResponse*>(
               &_SSJudgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSJudgeResponse& a, SSJudgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SSJudgeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSJudgeResponse* New() const final {
    return CreateMaybeMessage<SSJudgeResponse>(nullptr);
  }

  SSJudgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSJudgeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSJudgeResponse& from);
  void MergeFrom(const SSJudgeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSJudgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSJudgeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_judge_2eproto);
    return ::descriptor_table_judge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultListFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // repeated .SSJudgeResult result_list = 2;
  int result_list_size() const;
  private:
  int _internal_result_list_size() const;
  public:
  void clear_result_list();
  ::SSJudgeResult* mutable_result_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSJudgeResult >*
      mutable_result_list();
  private:
  const ::SSJudgeResult& _internal_result_list(int index) const;
  ::SSJudgeResult* _internal_add_result_list();
  public:
  const ::SSJudgeResult& result_list(int index) const;
  ::SSJudgeResult* add_result_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSJudgeResult >&
      result_list() const;

  // int32 session_id = 1;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSJudgeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSJudgeResult > result_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_judge_2eproto;
};
// -------------------------------------------------------------------

class SSJudgeResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSJudgeResult) */ {
 public:
  SSJudgeResult();
  virtual ~SSJudgeResult();

  SSJudgeResult(const SSJudgeResult& from);
  SSJudgeResult(SSJudgeResult&& from) noexcept
    : SSJudgeResult() {
    *this = ::std::move(from);
  }

  inline SSJudgeResult& operator=(const SSJudgeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSJudgeResult& operator=(SSJudgeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSJudgeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSJudgeResult* internal_default_instance() {
    return reinterpret_cast<const SSJudgeResult*>(
               &_SSJudgeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSJudgeResult& a, SSJudgeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SSJudgeResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSJudgeResult* New() const final {
    return CreateMaybeMessage<SSJudgeResult>(nullptr);
  }

  SSJudgeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSJudgeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSJudgeResult& from);
  void MergeFrom(const SSJudgeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSJudgeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSJudgeResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_judge_2eproto);
    return ::descriptor_table_judge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 8,
    kResultFieldNumber = 1,
    kCpuTimeFieldNumber = 2,
    kRealTimeFieldNumber = 3,
    kMemoryFieldNumber = 4,
    kSignalFieldNumber = 5,
    kExitCodeFieldNumber = 6,
    kErrorFieldNumber = 7,
  };
  // string content = 8;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cpu_time = 2;
  void clear_cpu_time();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_time() const;
  void set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_time() const;
  void _internal_set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 real_time = 3;
  void clear_real_time();
  ::PROTOBUF_NAMESPACE_ID::int32 real_time() const;
  void set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_real_time() const;
  void _internal_set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 memory = 4;
  void clear_memory();
  ::PROTOBUF_NAMESPACE_ID::int32 memory() const;
  void set_memory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory() const;
  void _internal_set_memory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 signal = 5;
  void clear_signal();
  ::PROTOBUF_NAMESPACE_ID::int32 signal() const;
  void set_signal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signal() const;
  void _internal_set_signal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exit_code = 6;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 error = 7;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSJudgeResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 real_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_;
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_judge_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSJudgeRequest

// string code = 1;
inline void SSJudgeRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSJudgeRequest::code() const {
  // @@protoc_insertion_point(field_get:SSJudgeRequest.code)
  return _internal_code();
}
inline void SSJudgeRequest::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SSJudgeRequest.code)
}
inline std::string* SSJudgeRequest::mutable_code() {
  // @@protoc_insertion_point(field_mutable:SSJudgeRequest.code)
  return _internal_mutable_code();
}
inline const std::string& SSJudgeRequest::_internal_code() const {
  return code_.GetNoArena();
}
inline void SSJudgeRequest::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSJudgeRequest::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSJudgeRequest.code)
}
inline void SSJudgeRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSJudgeRequest.code)
}
inline void SSJudgeRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSJudgeRequest.code)
}
inline std::string* SSJudgeRequest::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSJudgeRequest::release_code() {
  // @@protoc_insertion_point(field_release:SSJudgeRequest.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSJudgeRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:SSJudgeRequest.code)
}

// int32 session_id = 2;
inline void SSJudgeRequest::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeRequest::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeRequest::session_id() const {
  // @@protoc_insertion_point(field_get:SSJudgeRequest.session_id)
  return _internal_session_id();
}
inline void SSJudgeRequest::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void SSJudgeRequest::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:SSJudgeRequest.session_id)
}

// string language = 3;
inline void SSJudgeRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSJudgeRequest::language() const {
  // @@protoc_insertion_point(field_get:SSJudgeRequest.language)
  return _internal_language();
}
inline void SSJudgeRequest::set_language(const std::string& value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:SSJudgeRequest.language)
}
inline std::string* SSJudgeRequest::mutable_language() {
  // @@protoc_insertion_point(field_mutable:SSJudgeRequest.language)
  return _internal_mutable_language();
}
inline const std::string& SSJudgeRequest::_internal_language() const {
  return language_.GetNoArena();
}
inline void SSJudgeRequest::_internal_set_language(const std::string& value) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSJudgeRequest::set_language(std::string&& value) {
  
  language_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSJudgeRequest.language)
}
inline void SSJudgeRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSJudgeRequest.language)
}
inline void SSJudgeRequest::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSJudgeRequest.language)
}
inline std::string* SSJudgeRequest::_internal_mutable_language() {
  
  return language_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSJudgeRequest::release_language() {
  // @@protoc_insertion_point(field_release:SSJudgeRequest.language)
  
  return language_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSJudgeRequest::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:SSJudgeRequest.language)
}

// string test_case_json = 4;
inline void SSJudgeRequest::clear_test_case_json() {
  test_case_json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSJudgeRequest::test_case_json() const {
  // @@protoc_insertion_point(field_get:SSJudgeRequest.test_case_json)
  return _internal_test_case_json();
}
inline void SSJudgeRequest::set_test_case_json(const std::string& value) {
  _internal_set_test_case_json(value);
  // @@protoc_insertion_point(field_set:SSJudgeRequest.test_case_json)
}
inline std::string* SSJudgeRequest::mutable_test_case_json() {
  // @@protoc_insertion_point(field_mutable:SSJudgeRequest.test_case_json)
  return _internal_mutable_test_case_json();
}
inline const std::string& SSJudgeRequest::_internal_test_case_json() const {
  return test_case_json_.GetNoArena();
}
inline void SSJudgeRequest::_internal_set_test_case_json(const std::string& value) {
  
  test_case_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSJudgeRequest::set_test_case_json(std::string&& value) {
  
  test_case_json_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSJudgeRequest.test_case_json)
}
inline void SSJudgeRequest::set_test_case_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_case_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSJudgeRequest.test_case_json)
}
inline void SSJudgeRequest::set_test_case_json(const char* value, size_t size) {
  
  test_case_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSJudgeRequest.test_case_json)
}
inline std::string* SSJudgeRequest::_internal_mutable_test_case_json() {
  
  return test_case_json_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSJudgeRequest::release_test_case_json() {
  // @@protoc_insertion_point(field_release:SSJudgeRequest.test_case_json)
  
  return test_case_json_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSJudgeRequest::set_allocated_test_case_json(std::string* test_case_json) {
  if (test_case_json != nullptr) {
    
  } else {
    
  }
  test_case_json_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_case_json);
  // @@protoc_insertion_point(field_set_allocated:SSJudgeRequest.test_case_json)
}

// -------------------------------------------------------------------

// SSJudgeResponse

// int32 session_id = 1;
inline void SSJudgeResponse::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResponse::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResponse::session_id() const {
  // @@protoc_insertion_point(field_get:SSJudgeResponse.session_id)
  return _internal_session_id();
}
inline void SSJudgeResponse::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void SSJudgeResponse::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:SSJudgeResponse.session_id)
}

// repeated .SSJudgeResult result_list = 2;
inline int SSJudgeResponse::_internal_result_list_size() const {
  return result_list_.size();
}
inline int SSJudgeResponse::result_list_size() const {
  return _internal_result_list_size();
}
inline void SSJudgeResponse::clear_result_list() {
  result_list_.Clear();
}
inline ::SSJudgeResult* SSJudgeResponse::mutable_result_list(int index) {
  // @@protoc_insertion_point(field_mutable:SSJudgeResponse.result_list)
  return result_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSJudgeResult >*
SSJudgeResponse::mutable_result_list() {
  // @@protoc_insertion_point(field_mutable_list:SSJudgeResponse.result_list)
  return &result_list_;
}
inline const ::SSJudgeResult& SSJudgeResponse::_internal_result_list(int index) const {
  return result_list_.Get(index);
}
inline const ::SSJudgeResult& SSJudgeResponse::result_list(int index) const {
  // @@protoc_insertion_point(field_get:SSJudgeResponse.result_list)
  return _internal_result_list(index);
}
inline ::SSJudgeResult* SSJudgeResponse::_internal_add_result_list() {
  return result_list_.Add();
}
inline ::SSJudgeResult* SSJudgeResponse::add_result_list() {
  // @@protoc_insertion_point(field_add:SSJudgeResponse.result_list)
  return _internal_add_result_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSJudgeResult >&
SSJudgeResponse::result_list() const {
  // @@protoc_insertion_point(field_list:SSJudgeResponse.result_list)
  return result_list_;
}

// -------------------------------------------------------------------

// SSJudgeResult

// int32 result = 1;
inline void SSJudgeResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::result() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.result)
  return _internal_result();
}
inline void SSJudgeResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void SSJudgeResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.result)
}

// int32 cpu_time = 2;
inline void SSJudgeResult::clear_cpu_time() {
  cpu_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_cpu_time() const {
  return cpu_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::cpu_time() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.cpu_time)
  return _internal_cpu_time();
}
inline void SSJudgeResult::_internal_set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpu_time_ = value;
}
inline void SSJudgeResult::set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_time(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.cpu_time)
}

// int32 real_time = 3;
inline void SSJudgeResult::clear_real_time() {
  real_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_real_time() const {
  return real_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::real_time() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.real_time)
  return _internal_real_time();
}
inline void SSJudgeResult::_internal_set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  real_time_ = value;
}
inline void SSJudgeResult::set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_real_time(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.real_time)
}

// int32 memory = 4;
inline void SSJudgeResult::clear_memory() {
  memory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_memory() const {
  return memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::memory() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.memory)
  return _internal_memory();
}
inline void SSJudgeResult::_internal_set_memory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memory_ = value;
}
inline void SSJudgeResult::set_memory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.memory)
}

// int32 signal = 5;
inline void SSJudgeResult::clear_signal() {
  signal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_signal() const {
  return signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::signal() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.signal)
  return _internal_signal();
}
inline void SSJudgeResult::_internal_set_signal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  signal_ = value;
}
inline void SSJudgeResult::set_signal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.signal)
}

// int32 exit_code = 6;
inline void SSJudgeResult::clear_exit_code() {
  exit_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::exit_code() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.exit_code)
  return _internal_exit_code();
}
inline void SSJudgeResult::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exit_code_ = value;
}
inline void SSJudgeResult::set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.exit_code)
}

// int32 error = 7;
inline void SSJudgeResult::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSJudgeResult::error() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.error)
  return _internal_error();
}
inline void SSJudgeResult::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void SSJudgeResult::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.error)
}

// string content = 8;
inline void SSJudgeResult::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSJudgeResult::content() const {
  // @@protoc_insertion_point(field_get:SSJudgeResult.content)
  return _internal_content();
}
inline void SSJudgeResult::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:SSJudgeResult.content)
}
inline std::string* SSJudgeResult::mutable_content() {
  // @@protoc_insertion_point(field_mutable:SSJudgeResult.content)
  return _internal_mutable_content();
}
inline const std::string& SSJudgeResult::_internal_content() const {
  return content_.GetNoArena();
}
inline void SSJudgeResult::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSJudgeResult::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSJudgeResult.content)
}
inline void SSJudgeResult::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSJudgeResult.content)
}
inline void SSJudgeResult::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSJudgeResult.content)
}
inline std::string* SSJudgeResult::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSJudgeResult::release_content() {
  // @@protoc_insertion_point(field_release:SSJudgeResult.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSJudgeResult::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:SSJudgeResult.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_judge_2eproto
